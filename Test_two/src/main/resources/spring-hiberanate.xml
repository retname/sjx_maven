<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   ">


    <context:component-scan base-package="zy.service.impl"></context:component-scan>
    <context:component-scan base-package="zy.dao.impl"></context:component-scan>

    <!-- 声明事务管理器 -->
    <bean id="myHibTxManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- 定义事务通知 -->
    <tx:advice id="tx_Advice" transaction-manager="myHibTxManager">
        <!-- 定义事务传播规则 -->
        <tx:attributes>
            <!-- 对get/load/search开头的方法应用只读事务规则 -->
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="load*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="search*" propagation="SUPPORTS" read-only="true" />
            <!-- 对其他方法应用REQUIRED事务规则 -->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
    <!--; 对com.zxpm.biz包下的所有类的所有方法都应用事务规则 -->
    <aop:pointcut id="bizMethods"
    expression="execution(* zy.service.*.*(..))" />
    <!-- 将事务通知和切面组合 -->
    <aop:advisor advice-ref="tx_Advice" pointcut-ref="bizMethods" />
    </aop:config>

    <!-- 配置数据源org.springframework.jdbc.datasource.DriverManagerDataSource -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql:///test"></property>
        <property name="username" value="root"></property>
        <property name="password" value="0217"></property>
        <!--maxActive: 最大连接数量-->
        <property name="maxTotal" value="150"/>
        <!--minIdle: 最小空闲连接-->
        <property name="minIdle" value="5"/>
        <!--maxIdle: 最大空闲连接-->
        <property name="maxIdle" value="20"/>
        <!--initialSize: 初始化连接-->
        <property name="initialSize" value="30"/>
        <!-- 连接被泄露时是否打印 -->
        <property name="logAbandoned" value="true"/>
        <!--&lt;!&ndash;removeAbandoned: 是否自动回收超时连接&ndash;&gt;
        <property name="removeAbandoned"  value="true"/>-->
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->
        <property name="removeAbandonedTimeout" value="10"/>
        <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->
        <property name="MaxWaitMillis" value="1000"/>
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->
        <property name="minEvictableIdleTimeMillis" value="10000"/>
    </bean>




    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <value>zy.pojo</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>

                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!-- 博客地址 ：http://www.cnblogs.com/fsh1542115262/articles/6071470.html   hibernate.current_session_context_class三种配置-->
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate5.SpringSessionContext</prop>
                <!-- 避免这个错误信息Disabling contextual LOB creation as createClob() method threw error :java.lang.reflect.InvocationTargetException -->
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
                <!--开启hibernate的二级缓存-->
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <!--设置缓存的类型，设置缓存的提供商  EhCacheRegionFactory-->
            </props>
        </property>
    </bean>








</beans>